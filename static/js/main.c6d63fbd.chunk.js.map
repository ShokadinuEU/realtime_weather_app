{"version":3,"sources":["components/header/Progress.js","components/header/Header.js","components/fiveDays/FiveDays.js","components/fiveDays/Index.js","App.js","serviceWorker.js","index.js"],"names":["BorderLinearProgress","withStyles","root","height","backgroundColor","lighten","bar","borderRadius","LinearProgress","useStyles","makeStyles","theme","rootHeader","width","order","color","marginBottom","padding","display","paddingBottom","paddingLeft","fontSize","progressHeader","border","LinearDeterminate","classes","useState","seconds","setSeconds","isActive","useEffect","interval","console","log","setInterval","clearInterval","className","variant","value","mainTopHeader","justifyContent","headerCity","headerTime","headerCurrentWeather","Header","dt","Date","hours","getHours","currentTime","getMinutes","connectionString","today","setToday","Axios","get","then","res","data","main","temp","catch","err","mainHeader","Math","floor","mainDailyReport","margin","alignItems","DailyReportDay","DailyReportTemperature","DailyReportContition","flexDirection","textAlign","paddingRight","DailyReportContitionDescription","textTransform","fontWeight","fontFamily","FiveDays","days","setDays","list","map","a","i","key","dt_txt","src","weather","icon","alt","description","Index","historyMain","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6d63fbd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { lighten, makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst BorderLinearProgress = withStyles({\r\n  root: {\r\n    height: 10,\r\n    backgroundColor: lighten('#ff6c5c', 0.5),\r\n  },\r\n  bar: {\r\n    borderRadius: 20,\r\n    backgroundColor: '#fcba03',\r\n  },\r\n})(LinearProgress);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  rootHeader: {\r\n    width: '100%',\r\n    height: '10px',\r\n    order: '3',\r\n    backgroundColor: '#38373b',\r\n    color: '#fff',\r\n    marginBottom: '0.2em',\r\n    padding: '10px',\r\n    display: 'inline-table',\r\n    '& p': {\r\n      backgroundColor: '#363636',\r\n      paddingBottom: '0.8em',\r\n      paddingLeft: '1em',\r\n      fontSize: '0.5em',\r\n    }\r\n  },\r\n  progressHeader: {\r\n    height: '15px',\r\n    backgroundColor: '#38373b',\r\n    color: '#fff',\r\n    borderRadius: '7px',\r\n    width: '100%',\r\n    border: '1px solid black'\r\n  }\r\n}));\r\n\r\nexport default function LinearDeterminate() {\r\n  const classes = useStyles();\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(true);\r\n\r\n  function toggle() {\r\n    setIsActive(!isActive);\r\n  }\r\n\r\n  function reset() {\r\n    setSeconds(0);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    // console.log(interval)\r\n    console.log(seconds)\r\n    console.log(isActive)\r\n    if (seconds === 101) {\r\n      setSeconds(0)\r\n    }\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setSeconds(seconds => seconds + 1);\r\n      }, 1000);\r\n    } else if (!isActive && seconds !== 0) {\r\n      clearInterval(interval);\r\n    } else {\r\n      setSeconds(0)\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isActive, seconds]);\r\n\r\n  console.log(seconds)\r\n\r\n\r\n  return (\r\n    <div className={classes.rootHeader}>\r\n      <p>Reloading in <span>{seconds}</span>s</p>\r\n      <BorderLinearProgress\r\n        className={classes.progressHeader}\r\n        variant=\"determinate\"\r\n        color=\"primary\"\r\n        value={seconds}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Progress from \"./Progress\";\r\nimport Axios from \"axios\";\r\n\r\nconst useStyles = makeStyles({\r\n  mainTopHeader: {\r\n    order: \"1\",\r\n    backgroundColor: \"#363636\",\r\n    color: \"#fff\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    height: \"2em\",\r\n    padding: \"1em\",\r\n    paddingBottom: \"2em\"\r\n  },\r\n  headerCity: {\r\n    fontSize: \"1.3em\",\r\n    width: \"17%\"\r\n  },\r\n  headerTime: {\r\n    border: \"1px solid #000\",\r\n    height: \"fit-content\",\r\n    fontSize: \"0.6em\",\r\n    padding: \"0.7em\",\r\n    borderRadius: \"4px\"\r\n  },\r\n  headerCurrentWeather: {\r\n    fontSize: \"1.5em\"\r\n  }\r\n});\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n  var dt = new Date();\r\n  var hours = dt.getHours();\r\n  hours = hours % 12 || 12;\r\n  var minutes = dt.getMinutes();\r\n  var currentTime = hours + \":\" + minutes;\r\n\r\n  const APIKEY = \"02e8d71b0387ff5174b1913ab68d9663\";\r\n  const location = \"London,UK\";\r\n  const connectionString = `https://api.openweathermap.org/data/2.5/weather?q=${location}&APPID=${APIKEY}&units=metric&cnt=40`;\r\n\r\n  const [today, setToday] = useState([]);\r\n\r\n  useEffect(() => {\r\n    Axios.get(connectionString)\r\n      .then(res => {\r\n        setToday(res.data.main.temp);\r\n      })\r\n      .catch(err => console.log(err));\r\n    // eslint-disable-line\r\n  }, []);\r\n\r\n  // console.log(today)\r\n\r\n  return (\r\n    <div className={classes.mainHeader}>\r\n      <div className={classes.mainTopHeader}>\r\n        <div className={classes.headerCity}>\r\n          <span>LONDON</span>\r\n        </div>\r\n        <div className={classes.headerTime}>\r\n          <span>*** </span>\r\n          <span>{currentTime} GTM </span>\r\n          <span> ***</span>\r\n        </div>\r\n        <div className={classes.headerCurrentWeather}>\r\n          {Math.floor(today)}&#176;\r\n        </div>\r\n      </div>\r\n      <Progress />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Axios from \"axios\";\r\n\r\nconst useStyles = makeStyles({\r\n  mainDailyReport: {\r\n    backgroundColor: '#696969',\r\n    color: '#fff',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    margin: '4px',\r\n    borderRadius: '2px',\r\n    padding: '0.2em 0',\r\n    alignItems: 'center'\r\n  },\r\n  DailyReportDay: {\r\n    fontSize: '1.4em',\r\n    padding: '10px',\r\n    paddingLeft: '1em'\r\n  },\r\n  DailyReportTemperature: {\r\n    fontSize: '2em',\r\n    padding: '10px',\r\n    paddingLeft: '0',\r\n    width: '20%'\r\n  },\r\n  DailyReportContition: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    textAlign: 'center',\r\n    width: '35%',\r\n    paddingRight: '0.3em',\r\n    alignItems: 'flex-end'\r\n  },\r\n  DailyReportContitionDescription: {\r\n    fontSize: '0.8em',\r\n    textTransform: 'uppercase',\r\n    fontWeight: '100',\r\n    fontFamily: 'monospace',\r\n  }\r\n\r\n});\r\n\r\n\r\nexport default function FiveDays() {\r\n  const APIKEY = '02e8d71b0387ff5174b1913ab68d9663'\r\n  const location = 'London,UK'\r\n  const connectionString = `https://api.openweathermap.org/data/2.5/forecast?q=${location}&APPID=${APIKEY}&units=metric&cnt=40`\r\n  const classes = useStyles();\r\n\r\n  const [days, setDays] = useState([])\r\n\r\n  useEffect(() => {\r\n    Axios.get(connectionString)\r\n      .then(res => {\r\n        setDays(res.data.list)\r\n      })\r\n      .catch(err => console.log(err))\r\n  }, [])\r\n\r\n  // console.log(days)\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        days.map((a, i) => (\r\n          <div className={classes.mainDailyReport} key={i}>\r\n            <div className={classes.DailyReportDay}>\r\n              {\r\n                a.dt_txt\r\n              }\r\n            </div>\r\n            <div className={classes.DailyReportTemperature}>\r\n              <span>\r\n                {Math.floor(a.main.temp)}&#176;\r\n              </span>\r\n            </div>\r\n            <div className={classes.DailyReportContition}>\r\n              <span><img src={`http://openweathermap.org/img/w/${a.weather[0].icon}.png`} alt=\"img\" /></span>\r\n              <span className={classes.DailyReportContitionDescription}>\r\n                {a.weather[0].description}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport FiveDays from './FiveDays'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  mainDailyReport: {\r\n    backgroundColor: '#363636',\r\n    color: '#fff',\r\n    display: 'flex',\r\n  },\r\n});\r\n\r\nexport default function Index() {\r\n  const classes = useStyles();\r\n    return (\r\n      <div className={classes.historyMain}>\r\n        <FiveDays />\r\n      </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header/Header'\nimport FiveDays from './components/fiveDays/Index'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <FiveDays />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}